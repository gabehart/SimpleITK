/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "image_types.h"

namespace thrift {

int _kPixelTypeValues[] = {
  PixelType::Bool,
  PixelType::Byte,
  PixelType::Integer16,
  PixelType::Integer32,
  PixelType::Integer64,
  PixelType::Double,
  PixelType::Binary
};
const char* _kPixelTypeNames[] = {
  "Bool",
  "Byte",
  "Integer16",
  "Integer32",
  "Integer64",
  "Double",
  "Binary"
};
const std::map<int, const char*> _PixelType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kPixelTypeValues, _kPixelTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Image::ascii_fingerprint = "844BA63D0F4290FFF7EAAD3992F7537C";
const uint8_t Image::binary_fingerprint[16] = {0x84,0x4B,0xA6,0x3D,0x0F,0x42,0x90,0xFF,0xF7,0xEA,0xAD,0x39,0x92,0xF7,0x53,0x7C};

uint32_t Image::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->depth);
          this->__isset.depth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->buffer.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->buffer.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->buffer[_i4]);
            }
            iprot->readListEnd();
          }
          this->__isset.buffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->pixeltype = (PixelType::type)ecast5;
          this->__isset.pixeltype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->endianness);
          this->__isset.endianness = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Image::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Image");
  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->width);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->height);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("depth", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->depth);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("buffer", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, this->buffer.size());
    std::vector<int8_t> ::const_iterator _iter6;
    for (_iter6 = this->buffer.begin(); _iter6 != this->buffer.end(); ++_iter6)
    {
      xfer += oprot->writeByte((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("pixeltype", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->pixeltype);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("endianness", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->endianness);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
