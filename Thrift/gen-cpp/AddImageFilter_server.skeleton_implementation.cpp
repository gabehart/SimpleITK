// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "AddImageFilter.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

#include <sitkImage.h>
#include <sitkAddImageFilter.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class AddImageFilterHandler : virtual public ::thrift::AddImageFilterIf {
 public:
  AddImageFilterHandler() {
    // Your initialization goes here
  }

  void execute( ::thrift::Image& _return, const  ::thrift::Image& image1, const  ::thrift::Image& image2) {

    ::itk::simple::Image::Pointer itkImage1;   // copy from image1
    itk::simple::Image::Pointer itkImage2;   // copy from image2

    itk::simple::AddImageFilter filter;

    itk::simple::Image::Pointer itkImageOutput = filter.Execute( itkImage1, itkImage2 );

    // TODO convert itkImageOutput to the output Image structure

    printf("execute\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AddImageFilterHandler> handler(new AddImageFilterHandler());
  shared_ptr<TProcessor> processor(new ::thrift::AddImageFilterProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

