/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef AddImageFilter_H
#define AddImageFilter_H

#include <TProcessor.h>
#include "image_types.h"

namespace thrift {

class AddImageFilterIf {
 public:
  virtual ~AddImageFilterIf() {}
  virtual void execute(Image& _return, const Image& image1, const Image& image2) = 0;
};

class AddImageFilterNull : virtual public AddImageFilterIf {
 public:
  virtual ~AddImageFilterNull() {}
  void execute(Image& /* _return */, const Image& /* image1 */, const Image& /* image2 */) {
    return;
  }
};

typedef struct _AddImageFilter_execute_args__isset {
  _AddImageFilter_execute_args__isset() : image1(false), image2(false) {}
  bool image1;
  bool image2;
} _AddImageFilter_execute_args__isset;

class AddImageFilter_execute_args {
 public:

  AddImageFilter_execute_args() {
  }

  virtual ~AddImageFilter_execute_args() throw() {}

  Image image1;
  Image image2;

  _AddImageFilter_execute_args__isset __isset;

  bool operator == (const AddImageFilter_execute_args & rhs) const
  {
    if (!(image1 == rhs.image1))
      return false;
    if (!(image2 == rhs.image2))
      return false;
    return true;
  }
  bool operator != (const AddImageFilter_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddImageFilter_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AddImageFilter_execute_pargs {
 public:


  virtual ~AddImageFilter_execute_pargs() throw() {}

  const Image* image1;
  const Image* image2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AddImageFilter_execute_result__isset {
  _AddImageFilter_execute_result__isset() : success(false) {}
  bool success;
} _AddImageFilter_execute_result__isset;

class AddImageFilter_execute_result {
 public:

  AddImageFilter_execute_result() {
  }

  virtual ~AddImageFilter_execute_result() throw() {}

  Image success;

  _AddImageFilter_execute_result__isset __isset;

  bool operator == (const AddImageFilter_execute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AddImageFilter_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddImageFilter_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AddImageFilter_execute_presult__isset {
  _AddImageFilter_execute_presult__isset() : success(false) {}
  bool success;
} _AddImageFilter_execute_presult__isset;

class AddImageFilter_execute_presult {
 public:


  virtual ~AddImageFilter_execute_presult() throw() {}

  Image* success;

  _AddImageFilter_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AddImageFilterClient : virtual public AddImageFilterIf {
 public:
  AddImageFilterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AddImageFilterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void execute(Image& _return, const Image& image1, const Image& image2);
  void send_execute(const Image& image1, const Image& image2);
  void recv_execute(Image& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AddImageFilterProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<AddImageFilterIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (AddImageFilterProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AddImageFilterProcessor(boost::shared_ptr<AddImageFilterIf> iface) :
    iface_(iface) {
    processMap_["execute"] = &AddImageFilterProcessor::process_execute;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~AddImageFilterProcessor() {}
};

class AddImageFilterMultiface : virtual public AddImageFilterIf {
 public:
  AddImageFilterMultiface(std::vector<boost::shared_ptr<AddImageFilterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AddImageFilterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AddImageFilterIf> > ifaces_;
  AddImageFilterMultiface() {}
  void add(boost::shared_ptr<AddImageFilterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void execute(Image& _return, const Image& image1, const Image& image2) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->execute(_return, image1, image2);
        return;
      } else {
        ifaces_[i]->execute(_return, image1, image2);
      }
    }
  }

};

} // namespace

#endif
