/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Image implements org.apache.thrift.TBase<Image, Image._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Image");

  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("depth", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("buffer", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PIXELTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("pixeltype", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ENDIANNESS_FIELD_DESC = new org.apache.thrift.protocol.TField("endianness", org.apache.thrift.protocol.TType.I16, (short)6);

  public long width;
  public long height;
  public long depth;
  public List<Byte> buffer;
  /**
   * 
   * @see PixelType
   */
  public PixelType pixeltype;
  public short endianness;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WIDTH((short)1, "width"),
    HEIGHT((short)2, "height"),
    DEPTH((short)3, "depth"),
    BUFFER((short)4, "buffer"),
    /**
     * 
     * @see PixelType
     */
    PIXELTYPE((short)5, "pixeltype"),
    ENDIANNESS((short)6, "endianness");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WIDTH
          return WIDTH;
        case 2: // HEIGHT
          return HEIGHT;
        case 3: // DEPTH
          return DEPTH;
        case 4: // BUFFER
          return BUFFER;
        case 5: // PIXELTYPE
          return PIXELTYPE;
        case 6: // ENDIANNESS
          return ENDIANNESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WIDTH_ISSET_ID = 0;
  private static final int __HEIGHT_ISSET_ID = 1;
  private static final int __DEPTH_ISSET_ID = 2;
  private static final int __ENDIANNESS_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEPTH, new org.apache.thrift.meta_data.FieldMetaData("depth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUFFER, new org.apache.thrift.meta_data.FieldMetaData("buffer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.PIXELTYPE, new org.apache.thrift.meta_data.FieldMetaData("pixeltype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PixelType.class)));
    tmpMap.put(_Fields.ENDIANNESS, new org.apache.thrift.meta_data.FieldMetaData("endianness", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Image.class, metaDataMap);
  }

  public Image() {
    this.width = 1L;

    this.height = 1L;

    this.depth = 1L;

  }

  public Image(
    long width,
    long height,
    long depth,
    List<Byte> buffer,
    PixelType pixeltype,
    short endianness)
  {
    this();
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.depth = depth;
    setDepthIsSet(true);
    this.buffer = buffer;
    this.pixeltype = pixeltype;
    this.endianness = endianness;
    setEndiannessIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Image(Image other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.width = other.width;
    this.height = other.height;
    this.depth = other.depth;
    if (other.isSetBuffer()) {
      List<Byte> __this__buffer = new ArrayList<Byte>();
      for (Byte other_element : other.buffer) {
        __this__buffer.add(other_element);
      }
      this.buffer = __this__buffer;
    }
    if (other.isSetPixeltype()) {
      this.pixeltype = other.pixeltype;
    }
    this.endianness = other.endianness;
  }

  public Image deepCopy() {
    return new Image(this);
  }

  @Override
  public void clear() {
    this.width = 1L;

    this.height = 1L;

    this.depth = 1L;

    this.buffer = null;
    this.pixeltype = null;
    setEndiannessIsSet(false);
    this.endianness = 0;
  }

  public long getWidth() {
    return this.width;
  }

  public Image setWidth(long width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bit_vector.clear(__WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return __isset_bit_vector.get(__WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bit_vector.set(__WIDTH_ISSET_ID, value);
  }

  public long getHeight() {
    return this.height;
  }

  public Image setHeight(long height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bit_vector.clear(__HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return __isset_bit_vector.get(__HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bit_vector.set(__HEIGHT_ISSET_ID, value);
  }

  public long getDepth() {
    return this.depth;
  }

  public Image setDepth(long depth) {
    this.depth = depth;
    setDepthIsSet(true);
    return this;
  }

  public void unsetDepth() {
    __isset_bit_vector.clear(__DEPTH_ISSET_ID);
  }

  /** Returns true if field depth is set (has been assigned a value) and false otherwise */
  public boolean isSetDepth() {
    return __isset_bit_vector.get(__DEPTH_ISSET_ID);
  }

  public void setDepthIsSet(boolean value) {
    __isset_bit_vector.set(__DEPTH_ISSET_ID, value);
  }

  public int getBufferSize() {
    return (this.buffer == null) ? 0 : this.buffer.size();
  }

  public java.util.Iterator<Byte> getBufferIterator() {
    return (this.buffer == null) ? null : this.buffer.iterator();
  }

  public void addToBuffer(byte elem) {
    if (this.buffer == null) {
      this.buffer = new ArrayList<Byte>();
    }
    this.buffer.add(elem);
  }

  public List<Byte> getBuffer() {
    return this.buffer;
  }

  public Image setBuffer(List<Byte> buffer) {
    this.buffer = buffer;
    return this;
  }

  public void unsetBuffer() {
    this.buffer = null;
  }

  /** Returns true if field buffer is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffer() {
    return this.buffer != null;
  }

  public void setBufferIsSet(boolean value) {
    if (!value) {
      this.buffer = null;
    }
  }

  /**
   * 
   * @see PixelType
   */
  public PixelType getPixeltype() {
    return this.pixeltype;
  }

  /**
   * 
   * @see PixelType
   */
  public Image setPixeltype(PixelType pixeltype) {
    this.pixeltype = pixeltype;
    return this;
  }

  public void unsetPixeltype() {
    this.pixeltype = null;
  }

  /** Returns true if field pixeltype is set (has been assigned a value) and false otherwise */
  public boolean isSetPixeltype() {
    return this.pixeltype != null;
  }

  public void setPixeltypeIsSet(boolean value) {
    if (!value) {
      this.pixeltype = null;
    }
  }

  public short getEndianness() {
    return this.endianness;
  }

  public Image setEndianness(short endianness) {
    this.endianness = endianness;
    setEndiannessIsSet(true);
    return this;
  }

  public void unsetEndianness() {
    __isset_bit_vector.clear(__ENDIANNESS_ISSET_ID);
  }

  /** Returns true if field endianness is set (has been assigned a value) and false otherwise */
  public boolean isSetEndianness() {
    return __isset_bit_vector.get(__ENDIANNESS_ISSET_ID);
  }

  public void setEndiannessIsSet(boolean value) {
    __isset_bit_vector.set(__ENDIANNESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((Long)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((Long)value);
      }
      break;

    case DEPTH:
      if (value == null) {
        unsetDepth();
      } else {
        setDepth((Long)value);
      }
      break;

    case BUFFER:
      if (value == null) {
        unsetBuffer();
      } else {
        setBuffer((List<Byte>)value);
      }
      break;

    case PIXELTYPE:
      if (value == null) {
        unsetPixeltype();
      } else {
        setPixeltype((PixelType)value);
      }
      break;

    case ENDIANNESS:
      if (value == null) {
        unsetEndianness();
      } else {
        setEndianness((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WIDTH:
      return new Long(getWidth());

    case HEIGHT:
      return new Long(getHeight());

    case DEPTH:
      return new Long(getDepth());

    case BUFFER:
      return getBuffer();

    case PIXELTYPE:
      return getPixeltype();

    case ENDIANNESS:
      return new Short(getEndianness());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case DEPTH:
      return isSetDepth();
    case BUFFER:
      return isSetBuffer();
    case PIXELTYPE:
      return isSetPixeltype();
    case ENDIANNESS:
      return isSetEndianness();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Image)
      return this.equals((Image)that);
    return false;
  }

  public boolean equals(Image that) {
    if (that == null)
      return false;

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_depth = true;
    boolean that_present_depth = true;
    if (this_present_depth || that_present_depth) {
      if (!(this_present_depth && that_present_depth))
        return false;
      if (this.depth != that.depth)
        return false;
    }

    boolean this_present_buffer = true && this.isSetBuffer();
    boolean that_present_buffer = true && that.isSetBuffer();
    if (this_present_buffer || that_present_buffer) {
      if (!(this_present_buffer && that_present_buffer))
        return false;
      if (!this.buffer.equals(that.buffer))
        return false;
    }

    boolean this_present_pixeltype = true && this.isSetPixeltype();
    boolean that_present_pixeltype = true && that.isSetPixeltype();
    if (this_present_pixeltype || that_present_pixeltype) {
      if (!(this_present_pixeltype && that_present_pixeltype))
        return false;
      if (!this.pixeltype.equals(that.pixeltype))
        return false;
    }

    boolean this_present_endianness = true;
    boolean that_present_endianness = true;
    if (this_present_endianness || that_present_endianness) {
      if (!(this_present_endianness && that_present_endianness))
        return false;
      if (this.endianness != that.endianness)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Image other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Image typedOther = (Image)other;

    lastComparison = Boolean.valueOf(isSetWidth()).compareTo(typedOther.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, typedOther.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeight()).compareTo(typedOther.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, typedOther.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepth()).compareTo(typedOther.isSetDepth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depth, typedOther.depth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuffer()).compareTo(typedOther.isSetBuffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffer, typedOther.buffer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPixeltype()).compareTo(typedOther.isSetPixeltype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPixeltype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pixeltype, typedOther.pixeltype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndianness()).compareTo(typedOther.isSetEndianness());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndianness()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endianness, typedOther.endianness);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // WIDTH
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.width = iprot.readI64();
            setWidthIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // HEIGHT
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.height = iprot.readI64();
            setHeightIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DEPTH
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.depth = iprot.readI64();
            setDepthIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BUFFER
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.buffer = new ArrayList<Byte>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                byte _elem2;
                _elem2 = iprot.readByte();
                this.buffer.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PIXELTYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.pixeltype = PixelType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ENDIANNESS
          if (field.type == org.apache.thrift.protocol.TType.I16) {
            this.endianness = iprot.readI16();
            setEndiannessIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(WIDTH_FIELD_DESC);
    oprot.writeI64(this.width);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
    oprot.writeI64(this.height);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DEPTH_FIELD_DESC);
    oprot.writeI64(this.depth);
    oprot.writeFieldEnd();
    if (this.buffer != null) {
      oprot.writeFieldBegin(BUFFER_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, this.buffer.size()));
        for (byte _iter3 : this.buffer)
        {
          oprot.writeByte(_iter3);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.pixeltype != null) {
      oprot.writeFieldBegin(PIXELTYPE_FIELD_DESC);
      oprot.writeI32(this.pixeltype.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ENDIANNESS_FIELD_DESC);
    oprot.writeI16(this.endianness);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Image(");
    boolean first = true;

    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("depth:");
    sb.append(this.depth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("buffer:");
    if (this.buffer == null) {
      sb.append("null");
    } else {
      sb.append(this.buffer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pixeltype:");
    if (this.pixeltype == null) {
      sb.append("null");
    } else {
      sb.append(this.pixeltype);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endianness:");
    sb.append(this.endianness);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

